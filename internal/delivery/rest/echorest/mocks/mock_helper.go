// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/rest/echorest/helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	reflect "reflect"
)

// MockResponseHelper is a mock of ResponseHelper interface
type MockResponseHelper struct {
	ctrl     *gomock.Controller
	recorder *MockResponseHelperMockRecorder
}

// MockResponseHelperMockRecorder is the mock recorder for MockResponseHelper
type MockResponseHelperMockRecorder struct {
	mock *MockResponseHelper
}

// NewMockResponseHelper creates a new mock instance
func NewMockResponseHelper(ctrl *gomock.Controller) *MockResponseHelper {
	mock := &MockResponseHelper{ctrl: ctrl}
	mock.recorder = &MockResponseHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseHelper) EXPECT() *MockResponseHelperMockRecorder {
	return m.recorder
}

// ResponseData mocks base method
func (m *MockResponseHelper) ResponseData(c echo.Context, args interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseData", c, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResponseData indicates an expected call of ResponseData
func (mr *MockResponseHelperMockRecorder) ResponseData(c, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseData", reflect.TypeOf((*MockResponseHelper)(nil).ResponseData), c, args)
}

// ErrorResponse mocks base method
func (m *MockResponseHelper) ErrorResponse(c echo.Context, httpStatus int, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorResponse", c, httpStatus, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// ErrorResponse indicates an expected call of ErrorResponse
func (mr *MockResponseHelperMockRecorder) ErrorResponse(c, httpStatus, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorResponse", reflect.TypeOf((*MockResponseHelper)(nil).ErrorResponse), c, httpStatus, err)
}
