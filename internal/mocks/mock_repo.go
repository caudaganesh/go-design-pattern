// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "github.com/caudaganesh/go-design-pattern/internal/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserDBRepo is a mock of UserDBRepo interface
type MockUserDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserDBRepoMockRecorder
}

// MockUserDBRepoMockRecorder is the mock recorder for MockUserDBRepo
type MockUserDBRepoMockRecorder struct {
	mock *MockUserDBRepo
}

// NewMockUserDBRepo creates a new mock instance
func NewMockUserDBRepo(ctrl *gomock.Controller) *MockUserDBRepo {
	mock := &MockUserDBRepo{ctrl: ctrl}
	mock.recorder = &MockUserDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDBRepo) EXPECT() *MockUserDBRepoMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockUserDBRepo) Find(ID int) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserDBRepoMockRecorder) Find(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserDBRepo)(nil).Find), ID)
}
